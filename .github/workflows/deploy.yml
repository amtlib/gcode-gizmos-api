name: Build and Deploy

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
env:
  GITHUB_USERNAME: ${{ secrets.USERNAME }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  S3_REGION: ${{ secrets.S3_REGION }}
  S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
  S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
  POSTGRES_USERNAME: ${{ secrets.POSTGRES_USERNAME }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: node:14

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Build and Publish to Github Packages Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: amtlib/gcode-gizmos-api/gcode-gizmos-api
          registry: ghcr.io
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}
          dockerfile: Dockerfile
          buildargs: S3_BUCKET_NAME, DATABASE_URL, S3_REGION, S3_ACCESS_KEY_ID, S3_SECRET_ACCESS_KEY, POSTGRES_USERNAME, POSTGRES_PASSWORD
          tags: latest
      - name: Deploy package to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          envs: GITHUB_USERNAME, GITHUB_TOKEN
          script: |
            docker container ls | grep gcode-gizmos-api | awk '{print $1}' | xargs docker container kill
            docker system prune -a -f
            docker login ghcr.io -u $GITHUB_USERNAME -p $GITHUB_TOKEN
            docker pull ghcr.io/amtlib/gcode-gizmos-api/gcode-gizmos-api:latest
            cd gcode-gizmos-api
            git pull
            docker-compose up -d