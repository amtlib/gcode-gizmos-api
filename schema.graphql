# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  firstName: String
  lastName: String
  createdTasks(where: TaskWhereInput! = {}, orderBy: [TaskOrderByInput!]! = [], take: Int, skip: Int! = 0): [Task!]
  createdTasksCount(where: TaskWhereInput! = {}): Int
  assignedTasks(where: TaskWhereInput! = {}, orderBy: [TaskOrderByInput!]! = [], take: Int, skip: Int! = 0): [Task!]
  assignedTasksCount(where: TaskWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  createdTasks: TaskManyRelationFilter
  assignedTasks: TaskManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input TaskManyRelationFilter {
  every: TaskWhereInput
  some: TaskWhereInput
  none: TaskWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  firstName: String
  lastName: String
  createdTasks: TaskRelateToManyForUpdateInput
  assignedTasks: TaskRelateToManyForUpdateInput
}

input TaskRelateToManyForUpdateInput {
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  create: [TaskCreateInput!]
  connect: [TaskWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  firstName: String
  lastName: String
  createdTasks: TaskRelateToManyForCreateInput
  assignedTasks: TaskRelateToManyForCreateInput
}

input TaskRelateToManyForCreateInput {
  create: [TaskCreateInput!]
  connect: [TaskWhereUniqueInput!]
}

type AssigneeUser {
  id: ID!
  project: Project
  user: User
  role: AssigneeUserRoleType
}

enum AssigneeUserRoleType {
  admin
  manager
  client
  user
}

input AssigneeUserWhereUniqueInput {
  id: ID
}

input AssigneeUserWhereInput {
  AND: [AssigneeUserWhereInput!]
  OR: [AssigneeUserWhereInput!]
  NOT: [AssigneeUserWhereInput!]
  id: IDFilter
  project: ProjectWhereInput
  user: UserWhereInput
  role: AssigneeUserRoleTypeNullableFilter
}

input AssigneeUserRoleTypeNullableFilter {
  equals: AssigneeUserRoleType
  in: [AssigneeUserRoleType!]
  notIn: [AssigneeUserRoleType!]
  not: AssigneeUserRoleTypeNullableFilter
}

input AssigneeUserOrderByInput {
  id: OrderDirection
  role: OrderDirection
}

input AssigneeUserUpdateInput {
  project: ProjectRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  role: AssigneeUserRoleType
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AssigneeUserUpdateArgs {
  where: AssigneeUserWhereUniqueInput!
  data: AssigneeUserUpdateInput!
}

input AssigneeUserCreateInput {
  project: ProjectRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  role: AssigneeUserRoleType
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Project {
  id: ID!
  title: String
  description: String
  tasks(where: TaskWhereInput! = {}, orderBy: [TaskOrderByInput!]! = [], take: Int, skip: Int! = 0): [Task!]
  tasksCount(where: TaskWhereInput! = {}): Int
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  tasks: TaskManyRelationFilter
}

input ProjectOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input ProjectUpdateInput {
  title: String
  description: String
  tasks: TaskRelateToManyForUpdateInput
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  title: String
  description: String
  tasks: TaskRelateToManyForCreateInput
}

type Task {
  id: ID!
  project: Project
  createdBy: User
  assignedUser: User
  dueDate: DateTime
  estimatedTime: Int
  priority: TaskPriorityType
  name: String
  description: String
  status: TaskStatusType
  parentTask: Task
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

enum TaskPriorityType {
  high
  medium
  low
}

enum TaskStatusType {
  backlog
  in_development
  in_testing
  in_approval
  done
}

input TaskWhereUniqueInput {
  id: ID
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  id: IDFilter
  project: ProjectWhereInput
  createdBy: UserWhereInput
  assignedUser: UserWhereInput
  dueDate: DateTimeNullableFilter
  estimatedTime: IntNullableFilter
  priority: TaskPriorityTypeNullableFilter
  name: StringFilter
  description: StringFilter
  status: TaskStatusTypeNullableFilter
  parentTask: TaskWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input TaskPriorityTypeNullableFilter {
  equals: TaskPriorityType
  in: [TaskPriorityType!]
  notIn: [TaskPriorityType!]
  not: TaskPriorityTypeNullableFilter
}

input TaskStatusTypeNullableFilter {
  equals: TaskStatusType
  in: [TaskStatusType!]
  notIn: [TaskStatusType!]
  not: TaskStatusTypeNullableFilter
}

input TaskOrderByInput {
  id: OrderDirection
  dueDate: OrderDirection
  estimatedTime: OrderDirection
  priority: OrderDirection
  name: OrderDirection
  description: OrderDirection
  status: OrderDirection
}

input TaskUpdateInput {
  project: ProjectRelateToOneForUpdateInput
  createdBy: UserRelateToOneForUpdateInput
  assignedUser: UserRelateToOneForUpdateInput
  dueDate: DateTime
  estimatedTime: Int
  priority: TaskPriorityType
  name: String
  description: String
  status: TaskStatusType
  parentTask: TaskRelateToOneForUpdateInput
}

input TaskRelateToOneForUpdateInput {
  create: TaskCreateInput
  connect: TaskWhereUniqueInput
  disconnect: Boolean
}

input TaskUpdateArgs {
  where: TaskWhereUniqueInput!
  data: TaskUpdateInput!
}

input TaskCreateInput {
  project: ProjectRelateToOneForCreateInput
  createdBy: UserRelateToOneForCreateInput
  assignedUser: UserRelateToOneForCreateInput
  dueDate: DateTime
  estimatedTime: Int
  priority: TaskPriorityType
  name: String
  description: String
  status: TaskStatusType
  parentTask: TaskRelateToOneForCreateInput
}

input TaskRelateToOneForCreateInput {
  create: TaskCreateInput
  connect: TaskWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAssigneeUser(data: AssigneeUserCreateInput!): AssigneeUser
  createAssigneeUsers(data: [AssigneeUserCreateInput!]!): [AssigneeUser]
  updateAssigneeUser(where: AssigneeUserWhereUniqueInput!, data: AssigneeUserUpdateInput!): AssigneeUser
  updateAssigneeUsers(data: [AssigneeUserUpdateArgs!]!): [AssigneeUser]
  deleteAssigneeUser(where: AssigneeUserWhereUniqueInput!): AssigneeUser
  deleteAssigneeUsers(where: [AssigneeUserWhereUniqueInput!]!): [AssigneeUser]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(where: ProjectWhereUniqueInput!, data: ProjectUpdateInput!): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createTask(data: TaskCreateInput!): Task
  createTasks(data: [TaskCreateInput!]!): [Task]
  updateTask(where: TaskWhereUniqueInput!, data: TaskUpdateInput!): Task
  updateTasks(data: [TaskUpdateArgs!]!): [Task]
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteTasks(where: [TaskWhereUniqueInput!]!): [Task]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  assigneeUsers(where: AssigneeUserWhereInput! = {}, orderBy: [AssigneeUserOrderByInput!]! = [], take: Int, skip: Int! = 0): [AssigneeUser!]
  assigneeUser(where: AssigneeUserWhereUniqueInput!): AssigneeUser
  assigneeUsersCount(where: AssigneeUserWhereInput! = {}): Int
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  tasks(where: TaskWhereInput! = {}, orderBy: [TaskOrderByInput!]! = [], take: Int, skip: Int! = 0): [Task!]
  task(where: TaskWhereUniqueInput!): Task
  tasksCount(where: TaskWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
