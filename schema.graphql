# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Rating {
  id: ID!
  user: User
  model: Model
  score: Int
}

input RatingWhereUniqueInput {
  id: ID
}

input RatingWhereInput {
  AND: [RatingWhereInput!]
  OR: [RatingWhereInput!]
  NOT: [RatingWhereInput!]
  id: IDFilter
  user: UserWhereInput
  model: ModelWhereInput
  score: IntNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input RatingOrderByInput {
  id: OrderDirection
  score: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input RatingUpdateInput {
  user: UserRelateToOneForUpdateInput
  model: ModelRelateToOneForUpdateInput
  score: Int
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ModelRelateToOneForUpdateInput {
  create: ModelCreateInput
  connect: ModelWhereUniqueInput
  disconnect: Boolean
}

input RatingUpdateArgs {
  where: RatingWhereUniqueInput!
  data: RatingUpdateInput!
}

input RatingCreateInput {
  user: UserRelateToOneForCreateInput
  model: ModelRelateToOneForCreateInput
  score: Int
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input ModelRelateToOneForCreateInput {
  create: ModelCreateInput
  connect: ModelWhereUniqueInput
}

type ModelImage {
  id: ID!
  model: Model
  image: ImageFieldOutput
  createdBy: User
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ModelImageWhereUniqueInput {
  id: ID
}

input ModelImageWhereInput {
  AND: [ModelImageWhereInput!]
  OR: [ModelImageWhereInput!]
  NOT: [ModelImageWhereInput!]
  id: IDFilter
  model: ModelWhereInput
  createdBy: UserWhereInput
}

input ModelImageOrderByInput {
  id: OrderDirection
}

input ModelImageUpdateInput {
  model: ModelRelateToOneForUpdateInput
  image: ImageFieldInput
  createdBy: UserRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ModelImageUpdateArgs {
  where: ModelImageWhereUniqueInput!
  data: ModelImageUpdateInput!
}

input ModelImageCreateInput {
  model: ModelRelateToOneForCreateInput
  image: ImageFieldInput
  createdBy: UserRelateToOneForCreateInput
}

type ModelFile {
  id: ID!
  model: Model
  file: FileFieldOutput
  createdBy: User
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input ModelFileWhereUniqueInput {
  id: ID
}

input ModelFileWhereInput {
  AND: [ModelFileWhereInput!]
  OR: [ModelFileWhereInput!]
  NOT: [ModelFileWhereInput!]
  id: IDFilter
  model: ModelWhereInput
  createdBy: UserWhereInput
}

input ModelFileOrderByInput {
  id: OrderDirection
}

input ModelFileUpdateInput {
  model: ModelRelateToOneForUpdateInput
  file: FileFieldInput
  createdBy: UserRelateToOneForUpdateInput
}

input FileFieldInput {
  upload: Upload!
}

input ModelFileUpdateArgs {
  where: ModelFileWhereUniqueInput!
  data: ModelFileUpdateInput!
}

input ModelFileCreateInput {
  model: ModelRelateToOneForCreateInput
  file: FileFieldInput
  createdBy: UserRelateToOneForCreateInput
}

type User {
  id: ID!
  email: String
  isAdmin: Boolean
  password: PasswordState
  username: String
  createdModels(where: ModelWhereInput! = {}, orderBy: [ModelOrderByInput!]! = [], take: Int, skip: Int! = 0): [Model!]
  createdModelsCount(where: ModelWhereInput! = {}): Int
  likedModels(where: ModelWhereInput! = {}, orderBy: [ModelOrderByInput!]! = [], take: Int, skip: Int! = 0): [Model!]
  likedModelsCount(where: ModelWhereInput! = {}): Int
  createdImages(where: ModelImageWhereInput! = {}, orderBy: [ModelImageOrderByInput!]! = [], take: Int, skip: Int! = 0): [ModelImage!]
  createdImagesCount(where: ModelImageWhereInput! = {}): Int
  createdFiles(where: ModelFileWhereInput! = {}, orderBy: [ModelFileOrderByInput!]! = [], take: Int, skip: Int! = 0): [ModelFile!]
  createdFilesCount(where: ModelFileWhereInput! = {}): Int
  comments(where: CommentWhereInput! = {}, orderBy: [CommentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  ratings(where: RatingWhereInput! = {}, orderBy: [RatingOrderByInput!]! = [], take: Int, skip: Int! = 0): [Rating!]
  ratingsCount(where: RatingWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringFilter
  isAdmin: BooleanFilter
  username: StringFilter
  createdModels: ModelManyRelationFilter
  likedModels: ModelManyRelationFilter
  createdImages: ModelImageManyRelationFilter
  createdFiles: ModelFileManyRelationFilter
  comments: CommentManyRelationFilter
  ratings: RatingManyRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ModelManyRelationFilter {
  every: ModelWhereInput
  some: ModelWhereInput
  none: ModelWhereInput
}

input ModelImageManyRelationFilter {
  every: ModelImageWhereInput
  some: ModelImageWhereInput
  none: ModelImageWhereInput
}

input ModelFileManyRelationFilter {
  every: ModelFileWhereInput
  some: ModelFileWhereInput
  none: ModelFileWhereInput
}

input CommentManyRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input RatingManyRelationFilter {
  every: RatingWhereInput
  some: RatingWhereInput
  none: RatingWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  username: OrderDirection
}

input UserUpdateInput {
  email: String
  isAdmin: Boolean
  password: String
  username: String
  createdModels: ModelRelateToManyForUpdateInput
  likedModels: ModelRelateToManyForUpdateInput
  createdImages: ModelImageRelateToManyForUpdateInput
  createdFiles: ModelFileRelateToManyForUpdateInput
  comments: CommentRelateToManyForUpdateInput
  ratings: RatingRelateToManyForUpdateInput
}

input ModelRelateToManyForUpdateInput {
  disconnect: [ModelWhereUniqueInput!]
  set: [ModelWhereUniqueInput!]
  create: [ModelCreateInput!]
  connect: [ModelWhereUniqueInput!]
}

input ModelImageRelateToManyForUpdateInput {
  disconnect: [ModelImageWhereUniqueInput!]
  set: [ModelImageWhereUniqueInput!]
  create: [ModelImageCreateInput!]
  connect: [ModelImageWhereUniqueInput!]
}

input ModelFileRelateToManyForUpdateInput {
  disconnect: [ModelFileWhereUniqueInput!]
  set: [ModelFileWhereUniqueInput!]
  create: [ModelFileCreateInput!]
  connect: [ModelFileWhereUniqueInput!]
}

input CommentRelateToManyForUpdateInput {
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input RatingRelateToManyForUpdateInput {
  disconnect: [RatingWhereUniqueInput!]
  set: [RatingWhereUniqueInput!]
  create: [RatingCreateInput!]
  connect: [RatingWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  email: String
  isAdmin: Boolean
  password: String
  username: String
  createdModels: ModelRelateToManyForCreateInput
  likedModels: ModelRelateToManyForCreateInput
  createdImages: ModelImageRelateToManyForCreateInput
  createdFiles: ModelFileRelateToManyForCreateInput
  comments: CommentRelateToManyForCreateInput
  ratings: RatingRelateToManyForCreateInput
}

input ModelRelateToManyForCreateInput {
  create: [ModelCreateInput!]
  connect: [ModelWhereUniqueInput!]
}

input ModelImageRelateToManyForCreateInput {
  create: [ModelImageCreateInput!]
  connect: [ModelImageWhereUniqueInput!]
}

input ModelFileRelateToManyForCreateInput {
  create: [ModelFileCreateInput!]
  connect: [ModelFileWhereUniqueInput!]
}

input CommentRelateToManyForCreateInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input RatingRelateToManyForCreateInput {
  create: [RatingCreateInput!]
  connect: [RatingWhereUniqueInput!]
}

type Comment {
  id: ID!
  model: Model
  author: User
  createdAt: DateTime
  content: Comment_content_Document
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type Comment_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CommentWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  model: ModelWhereInput
  author: UserWhereInput
  createdAt: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input CommentOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
}

input CommentUpdateInput {
  model: ModelRelateToOneForUpdateInput
  author: UserRelateToOneForUpdateInput
  createdAt: DateTime
  content: JSON
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  model: ModelRelateToOneForCreateInput
  author: UserRelateToOneForCreateInput
  createdAt: DateTime
  content: JSON
}

type Model {
  id: ID!
  name: String
  description: Model_description_Document
  images(where: ModelImageWhereInput! = {}, orderBy: [ModelImageOrderByInput!]! = [], take: Int, skip: Int! = 0): [ModelImage!]
  imagesCount(where: ModelImageWhereInput! = {}): Int
  files(where: ModelFileWhereInput! = {}, orderBy: [ModelFileOrderByInput!]! = [], take: Int, skip: Int! = 0): [ModelFile!]
  filesCount(where: ModelFileWhereInput! = {}): Int
  createdAt: DateTime
  createdBy: User
  comments(where: CommentWhereInput! = {}, orderBy: [CommentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  likedBy(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  likedByCount(where: UserWhereInput! = {}): Int
  doUserLikesIt: Boolean
  userRating: Float
  ratingsAvg: Float
  rate(score: Int): Boolean
  slug: String
  recommendedInfill: Int
  recommendedMaterial: String
  supports: String
  ratings(where: RatingWhereInput! = {}, orderBy: [RatingOrderByInput!]! = [], take: Int, skip: Int! = 0): [Rating!]
  ratingsCount(where: RatingWhereInput! = {}): Int
}

type Model_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ModelWhereUniqueInput {
  id: ID
  slug: String
}

input ModelWhereInput {
  AND: [ModelWhereInput!]
  OR: [ModelWhereInput!]
  NOT: [ModelWhereInput!]
  id: IDFilter
  name: StringFilter
  images: ModelImageManyRelationFilter
  files: ModelFileManyRelationFilter
  createdAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  comments: CommentManyRelationFilter
  likedBy: UserManyRelationFilter
  slug: StringFilter
  recommendedInfill: IntNullableFilter
  recommendedMaterial: StringNullableFilter
  supports: StringNullableFilter
  ratings: RatingManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ModelOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  slug: OrderDirection
  recommendedInfill: OrderDirection
  recommendedMaterial: OrderDirection
  supports: OrderDirection
}

input ModelUpdateInput {
  name: String
  description: JSON
  images: ModelImageRelateToManyForUpdateInput
  files: ModelFileRelateToManyForUpdateInput
  createdAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  comments: CommentRelateToManyForUpdateInput
  likedBy: UserRelateToManyForUpdateInput
  slug: String
  recommendedInfill: Int
  recommendedMaterial: String
  supports: String
  ratings: RatingRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input ModelUpdateArgs {
  where: ModelWhereUniqueInput!
  data: ModelUpdateInput!
}

input ModelCreateInput {
  name: String
  description: JSON
  images: ModelImageRelateToManyForCreateInput
  files: ModelFileRelateToManyForCreateInput
  createdAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  comments: CommentRelateToManyForCreateInput
  likedBy: UserRelateToManyForCreateInput
  slug: String
  recommendedInfill: Int
  recommendedMaterial: String
  supports: String
  ratings: RatingRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createRating(data: RatingCreateInput!): Rating
  createRatings(data: [RatingCreateInput!]!): [Rating]
  updateRating(where: RatingWhereUniqueInput!, data: RatingUpdateInput!): Rating
  updateRatings(data: [RatingUpdateArgs!]!): [Rating]
  deleteRating(where: RatingWhereUniqueInput!): Rating
  deleteRatings(where: [RatingWhereUniqueInput!]!): [Rating]
  createModelImage(data: ModelImageCreateInput!): ModelImage
  createModelImages(data: [ModelImageCreateInput!]!): [ModelImage]
  updateModelImage(where: ModelImageWhereUniqueInput!, data: ModelImageUpdateInput!): ModelImage
  updateModelImages(data: [ModelImageUpdateArgs!]!): [ModelImage]
  deleteModelImage(where: ModelImageWhereUniqueInput!): ModelImage
  deleteModelImages(where: [ModelImageWhereUniqueInput!]!): [ModelImage]
  createModelFile(data: ModelFileCreateInput!): ModelFile
  createModelFiles(data: [ModelFileCreateInput!]!): [ModelFile]
  updateModelFile(where: ModelFileWhereUniqueInput!, data: ModelFileUpdateInput!): ModelFile
  updateModelFiles(data: [ModelFileUpdateArgs!]!): [ModelFile]
  deleteModelFile(where: ModelFileWhereUniqueInput!): ModelFile
  deleteModelFiles(where: [ModelFileWhereUniqueInput!]!): [ModelFile]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(where: CommentWhereUniqueInput!, data: CommentUpdateInput!): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  createModel(data: ModelCreateInput!): Model
  createModels(data: [ModelCreateInput!]!): [Model]
  updateModel(where: ModelWhereUniqueInput!, data: ModelUpdateInput!): Model
  updateModels(data: [ModelUpdateArgs!]!): [Model]
  deleteModel(where: ModelWhereUniqueInput!): Model
  deleteModels(where: [ModelWhereUniqueInput!]!): [Model]
  endSession: Boolean!
  authenticateUserWithPassword(username: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  email: String
  password: String
  username: String
}

type Query {
  ratings(where: RatingWhereInput! = {}, orderBy: [RatingOrderByInput!]! = [], take: Int, skip: Int! = 0): [Rating!]
  rating(where: RatingWhereUniqueInput!): Rating
  ratingsCount(where: RatingWhereInput! = {}): Int
  modelImages(where: ModelImageWhereInput! = {}, orderBy: [ModelImageOrderByInput!]! = [], take: Int, skip: Int! = 0): [ModelImage!]
  modelImage(where: ModelImageWhereUniqueInput!): ModelImage
  modelImagesCount(where: ModelImageWhereInput! = {}): Int
  modelFiles(where: ModelFileWhereInput! = {}, orderBy: [ModelFileOrderByInput!]! = [], take: Int, skip: Int! = 0): [ModelFile!]
  modelFile(where: ModelFileWhereUniqueInput!): ModelFile
  modelFilesCount(where: ModelFileWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  comments(where: CommentWhereInput! = {}, orderBy: [CommentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Comment!]
  comment(where: CommentWhereUniqueInput!): Comment
  commentsCount(where: CommentWhereInput! = {}): Int
  models(where: ModelWhereInput! = {}, orderBy: [ModelOrderByInput!]! = [], take: Int, skip: Int! = 0): [Model!]
  model(where: ModelWhereUniqueInput!): Model
  modelsCount(where: ModelWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
