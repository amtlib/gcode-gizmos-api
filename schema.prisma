// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model ModelImage {
  id              String  @id @default(cuid())
  model           Model?  @relation("ModelImage_model", fields: [modelId], references: [id])
  modelId         String? @map("model")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  createdBy       User?   @relation("ModelImage_createdBy", fields: [createdById], references: [id])
  createdById     String? @map("createdBy")

  @@index([modelId])
  @@index([createdById])
}

model ModelFile {
  id            String  @id @default(cuid())
  model         Model?  @relation("ModelFile_model", fields: [modelId], references: [id])
  modelId       String? @map("model")
  file_filesize Int?
  file_filename String?
  createdBy     User?   @relation("ModelFile_createdBy", fields: [createdById], references: [id])
  createdById   String? @map("createdBy")

  @@index([modelId])
  @@index([createdById])
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique @default("")
  isAdmin       Boolean      @default(false)
  password      String
  username      String       @unique @default("")
  createdModels Model[]      @relation("Model_createdBy")
  likedModels   Model[]      @relation("Model_likedBy")
  createdImages ModelImage[] @relation("ModelImage_createdBy")
  createdFiles  ModelFile[]  @relation("ModelFile_createdBy")
  comments      Comment[]    @relation("Comment_author")
}

model Comment {
  id        String    @id @default(cuid())
  model     Model?    @relation("Comment_model", fields: [modelId], references: [id])
  modelId   String?   @map("model")
  author    User?     @relation("Comment_author", fields: [authorId], references: [id])
  authorId  String?   @map("author")
  createdAt DateTime? @default(now())
  content   Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")

  @@index([modelId])
  @@index([authorId])
}

model Model {
  id                  String       @id @default(cuid())
  name                String       @default("")
  description         Json         @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  images              ModelImage[] @relation("ModelImage_model")
  files               ModelFile[]  @relation("ModelFile_model")
  createdAt           DateTime?    @default(now())
  createdBy           User?        @relation("Model_createdBy", fields: [createdById], references: [id])
  createdById         String?      @map("createdBy")
  comments            Comment[]    @relation("Comment_model")
  likedBy             User[]       @relation("Model_likedBy")
  slug                String       @unique @default("")
  recommendedInfill   Int?
  recommendedMaterial String?
  supports            String?

  @@index([createdById])
}
